/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var chirps = ee.ImageCollection("UCSB-CHG/CHIRPS/DAILY");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
////////////////////////////////////////////////////////////////////////////////////////////////////////
//////// Script to calculate the number, onset dates and cessation dates of African rainy seasons //////
//////// based on CHIRPS daily precipitation data (2001-2019)///////////////////////////////////////////
//////// This version does things on the basis of hydrological years, not calendar years ///////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

//// Guy Lomax
//// 2024-05-14
//// G.Lomax@exeter.ac.uk

/////////////////////////////////////////////////////////////////////////////////////////
////// 1. Set geographic region and period for seasonal identification (2001-2019) //////
/////////////////////////////////////////////////////////////////////////////////////////

var africaBbox = ee.Geometry.BBox(-18, -35, 52, 20);

// Dates for annual extraction of seasonal data
var START_YEAR = 2001;
var END_YEAR = 2019;

var yearList = ee.List.sequence(START_YEAR, END_YEAR);

var startDate = ee.Date.fromYMD(START_YEAR, 1, 1);
var endDate = ee.Date.fromYMD(END_YEAR + 1, 1, 1);

// Record CHIRPS native CRS and scale for file export
var chirpsProj = chirps.first().projection().getInfo();

/////////////////////////////////////////////////////////////////////////
////// 2. Harmonic regression to calculate number of rainy seasons //////
////// (based on https://goo.gl/lMwd2Y by Nick Clinton) /////////////////
/////////////////////////////////////////////////////////////////////////

// Filter CHIRPS dataset to time window
var chirpsFiltered = chirps.filterDate(startDate, endDate);

// Helper function to add annual time variables and constant term to CHIRPS precipitation images
var addVariables = function(image) {
  var date = ee.Date(image.get("system:time_start"));
  var years = date.difference(ee.Date('1970-01-01'), 'year');
  return image
    .addBands(ee.Image(years).rename('t').float())
    .addBands(ee.Image.constant(1));
};

var chirpsYears = chirpsFiltered.map(addVariables);

// Independent variables (including first two harmonics to capture multiple seasons per year)
var harmonicIndependents = ee.List(['constant', 't', 'cos_1', 'sin_1', 'cos_2', 'sin_2']);

// Dependent variable - daily precipitation
var dependent = ee.String("precipitation");

// Add harmonic terms as bands
var chirpsHarmonic = chirpsYears.map(function(image) {
  var timeRadians = image.select('t').multiply(2 * Math.PI);
  var timeRadians2 = image.select('t').multiply(4 * Math.PI);
  return image
    .addBands(timeRadians.cos().rename('cos_1'))
    .addBands(timeRadians.sin().rename('sin_1'))
    .addBands(timeRadians2.cos().rename('cos_2'))
    .addBands(timeRadians2.sin().rename('sin_2'));
});

// Harmonic regression
var chirpsHarmonicReg = chirpsHarmonic
  .select(harmonicIndependents.add(dependent))
  .reduce(ee.Reducer.linearRegression(harmonicIndependents.length(), 1));

var harmonicCoefficients = chirpsHarmonicReg.select('coefficients')
  .arrayProject([0])
  .arrayFlatten([harmonicIndependents]);

print(harmonicCoefficients)

//////////////////////////////////////////////////////////////////////////
////// 4. Calculate ratio of amplitudes of second to first harmonic //////
//////////////////////////////////////////////////////////////////////////

// Ratio > 1 suggests two rainy seasons per year

// Calculate amplitudes as sqrt(cos^2 + sin^2) for each harmonic
var harmonicAmplitudes = harmonicCoefficients
  .expression("sqrt( pow(b('cos_1'), 2) + pow(b('sin_1'), 2) )").rename("amplitude_1")
  .addBands(harmonicCoefficients
    .expression("sqrt( pow(b('cos_2'), 2) + pow(b('sin_2'), 2) )").rename("amplitude_2"));

// Calculate ratio of amplitudes
// Ratio > 1 indicates two rainy seasons; ratio < 1 indicates single primary rainy season
var seasonalityRatio = harmonicAmplitudes
  .addBands(harmonicAmplitudes
    .select("amplitude_2")
    .divide(harmonicAmplitudes
      .select("amplitude_1"))
    .rename("seasonalityRatio"));
    
print("Seasonality ratio", seasonalityRatio);

// // Export to Earth Engine Asset at CHIRPS scale

// Export.image.toAsset({
//   image: seasonalityRatio,
//   description: "seasonalityRatio",
//   assetId: "africa_rangeland_precipitation_gpp/seasonalityRatio",
//   region: africaBbox,
//   crs: chirpsProj.crs,
//   crsTransform: chirpsProj.transform,
//   maxPixels: 1e9
// });

seasonalityRatio = ee.Image("projects/ee-guylomax01/assets/africa_rangeland_precipitation_gpp/seasonalityRatio");

// Add to map
// Blue = ratio < 1 (single season per year)
// Green/red = ratio > 1 (multiple seasons per year)

Map.addLayer(
  seasonalityRatio.select("amplitude_ratio"),
  {min: 0, max: 4, palette: ['#1f78b4', '#f7f7f7', '#b2df8a','#33a02c','#fb9a99','#e31a1c']},
  "Seasonality ratio");

// Export to Drive
Export.image.toDrive({
  image: seasonalityRatio,
  description: "seasonalityRatioToDrive",
  folder: "season_variables",
  fileNamePrefix: "seasonalityRatio",
  region: africaBbox,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  maxPixels: 1e9
});

//////////////////////////////////////////////////////////////////////////
////// 5. Calculate cumulative precipitation anomaly for mean cycle //////
//////////////////////////////////////////////////////////////////////////

// Calculate average annual cycle
var doyList = ee.List.sequence(1, 365);
var chirpsCycle = ee.ImageCollection(doyList.map(function(doy) {
  var chirpsDay = chirps.filter(ee.Filter.calendarRange(doy, doy, "day_of_year"));
  
  return chirpsDay.mean()
                   .set("dayOfYear", doy);
}));

print("CHIRPS average annual cycle", chirpsCycle);

// Calculate mean daily precipitation
var chirpsMeanDailyRainfall = chirpsCycle.mean();

// Calculate mean cumulative precipitation anomaly by day of year
var chirpsCumulativeAnomaly = ee.ImageCollection(
  ee.List(
    // Calculate cumulative anomaly through yearly cycle
    chirpsCycle.iterate(function(today, anomalyList) {
      
      // Add dayOfYear band and property to allow extraction of onset/cessation
      var dayOfYear = today.get("dayOfYear");
      var dayOfYearBand = ee.Image.constant(dayOfYear).rename("dayOfYear").toInt();
      
      // Update cumulative anomaly with daily anomaly
      var todayAnomaly = ee.Image(today).subtract(chirpsMeanDailyRainfall);
      var totalToYesterday = ee.Image(ee.List(anomalyList).get(-1)).select(0);
      var cumulativeAnomaly = totalToYesterday.add(todayAnomaly)
                                                           .addBands(dayOfYearBand)
                                                           .set("dayOfYear", dayOfYear);
      
      // Append cumulative anomaly to list
      return ee.List(anomalyList).add(cumulativeAnomaly);
    },
    
    // Set initial dummy list - needs to be two images to allow function code to act on it as a list
    ee.List([ee.Image.constant(0), ee.Image.constant(0).rename("precipitationAnomaly")])
    )
  ).slice(2));  // Remove initial dummy list

// Add cumulative anomaly collection to map to allow spot checking with Inspector

print("CHIRPS cumulative precipitation anomaly", chirpsCumulativeAnomaly);
Map.addLayer(
  chirpsCumulativeAnomaly.select("precipitationAnomaly"),
  {min: -100, max: 100},
  "Average cumulative rainfall anomaly",
  false
);

///////////////////////////////////////////////////////////////////////
////// 6. Calculate mean hydrological year onset for all pixels ///////
///////////////////////////////////////////////////////////////////////

// Define hydrological year per pixel as 31 days before the mean minimum in
// cumulative precipitation anomaly (i.e., 30 days before peak rainy season onset)

// First calculate overall rainy season onset date for whole study area
// Calculate onset date (minimum cumulative anomaly + 1 day) and cessation/
// date (maximum cumulative anomaly) for pixels with a single season

var onsetDateAll = chirpsCumulativeAnomaly
  .reduce(ee.Reducer.min(2))
  .select(1)
  .add(1)    // Onset date considered to be day after min value
  .rename("onset")
  .toInt();

var hYearStart = onsetDateAll
  .add(365)
  .subtract(30)
  .mod(365);

// Method above leaves some values as 0 rather than 365; need to manually change

hYearStart = hYearStart.where(hYearStart.eq(0), 365);

Export.image.toAsset({
  image: hYearStart,
  description: "hYearStartMean",
  assetId: "africa_rangeland_precipitation_gpp/hYearStartMean",
  region: africaBbox,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  maxPixels: 1e9
});

// Load asset if present
hYearStart = ee.Image("projects/ee-guylomax01/assets/africa_rangeland_precipitation_gpp/hYearStartMean");

Export.image.toDrive({
  image: hYearStart,
  description: "hYearStartMeanExport",
  folder: "season_variables",
  fileNamePrefix: "hYearStartMean",
  region: africaBbox,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  maxPixels: 1e9
});

// Visualise on map
Map.addLayer(
  hYearStart,
  {min: 0, max: 365, palette: ["red", "orange", "yellow", "green", "blue", "purple"]},
  "Start of hydrological year"
);

///////////////////////////////////////////////////////////////////////////////
////// 7. Calculate average start and end dates for single-season pixels //////
///////////////////////////////////////////////////////////////////////////////

// Create masks for single and double season pixels
var singleSeason = seasonalityRatio
  .select("amplitude_ratio")
  .lt(1);
var doubleSeason = singleSeason.eq(0);

// Calculate onset date (minimum cumulative anomaly + 1 day) and cessation/
// date (maximum cumulative anomaly) for pixels with a single season

var onsetDateSingle = chirpsCumulativeAnomaly
  .reduce(ee.Reducer.min(2))
  .select(1)
  .updateMask(singleSeason)
  .add(1)    // Onset date considered to be day after min value
  .rename("onset");
                                          
var cessationDateSingle = chirpsCumulativeAnomaly
  .reduce(ee.Reducer.max(2))
  .select(1)
  .updateMask(singleSeason)
  .rename("cessation");

var seasonDatesSingle = onsetDateSingle
  .addBands(cessationDateSingle)
  .toInt();

// Export to Earth Engine Asset at CHIRPS scale

Export.image.toAsset({
  image: seasonDatesSingle,
  description: "seasonDatesSingle",
  assetId: "africa_rangeland_precipitation_gpp/seasonDatesSingle",
  region: africaBbox,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  maxPixels: 1e9
});

// Load asset if present
seasonDatesSingle = ee.Image("projects/ee-guylomax01/assets/africa_rangeland_precipitation_gpp/seasonDatesSingle");

Export.image.toDrive({
  image: seasonDatesSingle,
  description: "meanSeasonDatesSingleExport",
  fileNamePrefix: "meanSeasonDatesSingle",
  folder: "season_variables",
  region: africaBbox,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  maxPixels: 1e9
});

///////////////////////////////////////////////////////////////////////////////
////// 8. Calculate average start and end dates for double season pixels //////
///////////////////////////////////////////////////////////////////////////////

// Using method adapted from Dunning et al. 2016.
// 1. Smooth the cumulative anomaly curve with a 30-day mean smoother
// 2. Find local maxima and minima using a sliding window

// 30-day running mean smoother

var chirpsCumulativeAnomalySmooth = ee.ImageCollection(
  chirpsCumulativeAnomaly.map(function(img) {
    
    var year = ee.Number(365);
    var doy = ee.Number(img.get("dayOfYear"));
    var doyBand = img.select("dayOfYear");
    
    // Define smoothing window (30 days total, i.e. +/-15 days)
    var smoothWindow = ee.Number(15);
    
    // Define window allowing for overlap between years
    var lowerWindow = doy.add(year).subtract(smoothWindow).mod(year);
    var upperWindow = doy.add(year).add(smoothWindow).mod(year);
    
    // Retrieve all anomaly images within local window
    // Apply different filter if window overlaps two calendar years using if statement
    var filter = ee.Algorithms.If(doy.lte(smoothWindow).or(doy.gte(year.subtract(smoothWindow))),
                                  ee.Filter.or(ee.Filter.gte("dayOfYear", lowerWindow), ee.Filter.lte("dayOfYear", upperWindow)),
                                  ee.Filter.and(ee.Filter.gte("dayOfYear", lowerWindow), ee.Filter.lte("dayOfYear", upperWindow)));
    
    var localImages = chirpsCumulativeAnomaly
      .filter(filter)
      .select("precipitationAnomaly");
    
    return localImages
      .mean()
      .addBands(doyBand)
      .copyProperties(img);
}));

print("CHIRPS cumulative precipitation anomaly smoothed", chirpsCumulativeAnomalySmooth);

Map.addLayer(
  chirpsCumulativeAnomalySmooth.select(0),
  {min: -500, max: 500, palette: ['#d53e4f','#f46d43','#fdae61','#fee08b','#ffffbf','#e6f598','#abdda4','#66c2a5','#3288bd']},
  "Average cumulative rainfall anomaly - smoothed",
  false);

// Define function to extract local minima and maxima from cumulative anomaly curve for specified window length
// Window value n means search n days either side (i.e. full window length of 2 * n)

var findLocalMinmax = function(IC, window) {
  var year = ee.Number(365);
  
  var localMinmax = ee.ImageCollection(IC.map(function(img) {
    
    var doy = ee.Number(img.get("dayOfYear"));
    
    // Define window (allowing for overlap between years)
    var lowerWindow = doy.add(year).subtract(window).mod(year);
    var upperWindow = doy.add(year).add(window).mod(year);
    
    // Retrieve all anomaly images within local window
    var filter = ee.Algorithms.If(doy.lt(window).or(doy.gte(year.subtract(window))),
                                  ee.Filter.or(ee.Filter.gte("dayOfYear", lowerWindow), ee.Filter.lte("dayOfYear", upperWindow)),
                                  ee.Filter.and(ee.Filter.gte("dayOfYear", lowerWindow), ee.Filter.lte("dayOfYear", upperWindow)));
    
    // Retrieve images
    var localImages = IC.filter(filter);
    
    // Find dates of local minimum and maximum of each rolling window
    var localMin = localImages.reduce(ee.Reducer.min(2)).select(1);
    var localMax = localImages.reduce(ee.Reducer.max(2)).select(1);
    
    // Test if each image is the local min or max
    var isMin = img.select("dayOfYear")
                    .eq(localMin);
    var isMax = img.select("dayOfYear")
                    .eq(localMax);
    
    // Mask pixels that are not local min or max
    var localMinOnly = localMin.updateMask(isMin);
    var localMaxOnly = localMax.updateMask(isMax);
  
    return localMinOnly.rename("localMin")
            .addBands(localMaxOnly.rename("localMax"));
}));
  
  // Calculate number and dates of identified minima/maxima
  var numberOfMinima = localMinmax.select("localMin").count().rename("numberOfMinima");
  var numberOfMaxima = localMinmax.select("localMax").count().rename("numberOfMaxima");
  
  // Return dates of minima and maxima as an array image
  var minDates = localMinmax.select("localMin")
    .toArray()
    .arraySort()
    .rename("minima");
  var maxDates = localMinmax.select("localMax")
    .toArray()
    .arraySort()
    .rename("maxima");
  
  return numberOfMinima
    .addBands(numberOfMaxima)
    .addBands(minDates)
    .addBands(maxDates);
};

// Test fit for 30-day, 60-day and 90-day windows
var localMinmax90 = findLocalMinmax(chirpsCumulativeAnomalySmooth, 45);
var localMinmax60 = findLocalMinmax(chirpsCumulativeAnomalySmooth, 30);
var localMinmax30 = findLocalMinmax(chirpsCumulativeAnomalySmooth, 15);

print("Double season maxima/minima", localMinmax90, localMinmax60, localMinmax30);

// Convert array image to bands of min and max values
// Extract the two array bands and convert to six-band image of maxima and minima 
var bandNames = [["first", "second", "third"], ["min", "max"]];

var precipitationMinMax90 = localMinmax90.select(["minima", "maxima"])  // Extract the two array bands containing maxima/minima dates
                                              .arrayPad([3, 1])              // Pad with zeroes to make all arrays 3x1 dimensions
                                              .arraySlice(0, 0, 3)           // Limit array to max 3 values
                                              .toArray(1)                    // Concatenate both 3x1 arrays to a single 3x2 array
                                              .arrayFlatten(bandNames);     // Extract 3x2 array values as separate band names

var precipitationMinMax60 = localMinmax60.select(["minima", "maxima"])
                                              .arrayPad([3, 1])
                                              .arraySlice(0, 0, 3)
                                              .toArray(1)
                                              .arrayFlatten(bandNames);

var precipitationMinMax30 = localMinmax30.select(["minima", "maxima"])
                                              .arrayPad([3, 1])
                                              .arraySlice(0, 0, 3)
                                              .toArray(1)
                                              .arrayFlatten(bandNames);

// // Export to Earth Engine Asset at CHIRPS scale
// Export.image.toAsset({
//   image: precipitationMinMax90,
//   description: "cumulativePrecipitationMinMax90",
//   assetId: "africa_rangeland_precipitation_gpp/PrecipitationMinMax90",
//   region: africaBbox,
//   crs: chirpsProj.crs,
//   crsTransform: chirpsProj.transform,
//   maxPixels: 1e9
// });

// Export.image.toAsset({
//   image: precipitationMinMax60,
//   description: "cumulativePrecipitationMinMax60",
//   assetId: "africa_rangeland_precipitation_gpp/PrecipitationMinMax60",
//   region: africaBbox,
//   crs: chirpsProj.crs,
//   crsTransform: chirpsProj.transform,
//   maxPixels: 1e9
// });

// Export.image.toAsset({
//   image: precipitationMinMax30,
//   description: "cumulativePrecipitationMinMax30",
//   assetId: "africa_rangeland_precipitation_gpp/PrecipitationMinMax30",
//   region: africaBbox,
//   crs: chirpsProj.crs,
//   crsTransform: chirpsProj.transform,
//   maxPixels: 1e9
// });

// Load assets if present
precipitationMinMax90 = ee.Image("projects/ee-guylomax01/assets/africa_rangeland_precipitation_gpp/precipitationMinMax90");
precipitationMinMax60 = ee.Image("projects/ee-guylomax01/assets/africa_rangeland_precipitation_gpp/precipitationMinMax60");
precipitationMinMax30 = ee.Image("projects/ee-guylomax01/assets/africa_rangeland_precipitation_gpp/precipitationMinMax30");

// Create mosaic layers of mean maxima/minima, starting with 90-day window and
// decreasing until I get four dates (two seasons).

// Function to map over bands to create mask image
var doubleSeasonMask = function(img) {
  var isSeasonImg = img.neq(0);
  
  var mask = isSeasonImg
    .reduce(ee.Reducer.sum())
    .eq(4);
  
  return img.updateMask(mask);
};

// Create mosaic running from long to short windows

var doubleSeasonMosaic = ee.ImageCollection(
  [doubleSeasonMask(precipitationMinMax90),
  doubleSeasonMask(precipitationMinMax60),
  doubleSeasonMask(precipitationMinMax30)]
  )
  .mosaic()
  .updateMask(singleSeason.neq(1))
  .select([0,1,2,3])  // Drop additional empty bands
  .add([1,0,1,0]);    // Add 1 to minimum dates to reach onset

// Sort dates, pairing seasons by date (using Array Images)
// First create logical for whether one season overlaps calendar year

var seasonOverlap = doubleSeasonMosaic.expression("(b(0) + b(2)) > (b(1) + b(3))");

// Array image that adds 365 to "firstMax" value if seasonOverlap is TRUE
var overlapImage = ee.Image.constant([0,365,0,0])
  .multiply(seasonOverlap)
  .toArray();

var doubleSeasonArray = doubleSeasonMosaic
  .toArray()
  .add(overlapImage)
  .arraySort();

// Retrieve dates as bands

var seasonDatesDouble = doubleSeasonArray
  .arrayFlatten([["onset1", "cessation1", "onset2", "cessation2"]])
  .toInt();

print("doubleSeasonDates", seasonDatesDouble);

// // Export to Earth Engine Asset at CHIRPS scale

Export.image.toAsset({
  image: seasonDatesDouble,
  description: "seasonDatesDouble",
  assetId: "africa_rangeland_precipitation_gpp/seasonDatesDouble",
  region: africaBbox,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  maxPixels: 1e9
});

// Load asset if present
seasonDatesDouble = ee.Image("projects/ee-guylomax01/assets/africa_rangeland_precipitation_gpp/seasonDatesDouble");

Export.image.toDrive({
  image: seasonDatesDouble.toInt(),
  description: "meanSeasonDatesDoubleExport",
  fileNamePrefix: "meanSeasonDatesDouble",
  folder: "season_variables",
  region: africaBbox,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  maxPixels: 1e9
});

// Add to map 
var seasonVisParams = {
  min: 1, 
  max: 720
};

Map.addLayer(seasonDatesSingle, seasonVisParams, "Single season dates", false);
Map.addLayer(seasonDatesDouble, seasonVisParams, "Double season dates", false);

///////////////////////////////////////////////////////////////////////////
////// 10. Onset and cessation dates per year - single season pixels //////
///////////////////////////////////////////////////////////////////////////

// To calculate annual start and end dates, we need to use the hydrological year
// For each hYear, we recalculate the anomaly for a 365-day window running from 30 days before
// the start of the hYear to 30 days before the end (should capture start and end of rainy season).
// Anomaly is calculated using the precipitation value for that hydrological year,
// rather than the long-term value, to ensure start and end dates are found in
// years of low rainfall.

// Steps:
// 1. Filter CHIRPS daily images for each year, including y-1 and y+1 to allow overlap
// 2. Calculate the average daily rainfall in the hydrological year for each pixel,
//    and add as a layer to all images in the collection.
// 3. Filter to keep only days within the hYear range.
// 4. Create an hYear mask for each pixel, where pixels outside the range are masked
// 5. Calculate cumulative anomaly for the range of pixels, and identify the min (for onset)
//    or the max (cessation).

var annualDatesSingle = ee.ImageCollection(yearList.map(function(y) {
  
  // Retrieve CHIRPS images from 60 days before start of calendar year to 1 year after end
  y = ee.Number(y);
  var yearStart = ee.Date.fromYMD(y, 1, 1);
  var d1 = yearStart.advance(-60, "days");
  var d2 = yearStart.advance(2, "year");
  
  var chirpsYearList = chirps
    .filterDate(d1, d2);
  
  // Assign day number to each image in filtered CHIRPS data and add as band
  var chirpsYearNumbered = ee.ImageCollection(chirpsYearList
    .map(function(img) {
      var day = ee.Date(img.get("system:time_start")).difference(yearStart, "days");
      var dayBand = ee.Image.constant(day)
        .toInt()
        .rename("day");
      
      return ee.Image(img)
        .set("day", day)
        .addBands(dayBand);
  }));
  
  // Search window for maxima/minima
  var window = 0;
  
  // Define masks
  var chirpsYearMasked = chirpsYearNumbered.map(function(img) {
  
    var day = img.select("day");
    
    var hYearDay = day
      .subtract(hYearStart)
      .rename("hYearDay");
  
    // Define hydrological year mask
    var hYearMaskStart = hYearDay
      .add(window)
      .gte(0);
    var hYearMaskEnd = hYearDay
      .subtract(window)
      .lte(365);
    var hYearMask = hYearMaskStart
      .and(hYearMaskEnd)
      .rename("hYearMask");
    
    // Set rainfall outside hyear to zero (not masked, as masking would prevent cumulative sum)
    var chirpsRainfallHyear = img.multiply(hYearMask);
    
    // Add layers as additional bands
    return chirpsRainfallHyear
      .addBands(hYearMask)
      .addBands(hYearDay);
  });
  
  // Mean daily rainfall per pixel for this hydrological year
    var hyearMeanDailyRainfall = chirpsYearMasked
    .select("precipitation")
    .sum()
    .divide(365 + window * 2);
  
  // Calculate cumulative anomaly across hydrological year
  var chirpsCumulativeAnomaly = ee.ImageCollection(
  ee.List(
    // Calculate running anomaly through yearly cycle
    chirpsYearMasked.iterate(function(today, anomalyList) {
      
      // Add dayOfHYear band to allow extraction of onset/cessation
      var dayBand = today.select("hYearDay");
      
      // Extract mask band as layer
      var hyearMask = today.select("hYearMask");
      
      // Update cumulative anomaly with daily anomaly
      var todayAnomaly = ee.Image(today)
        .select("precipitation")
        .subtract(hyearMeanDailyRainfall);
      
      var hyearAnomaly = todayAnomaly
        .multiply(hyearMask)                // Set to zero if masked
        .rename("hyearAnomaly");
      
      var totalToYesterday = ee.Image(ee.List(anomalyList).get(-1)).select("hyearAnomaly");
      var cumulativeAnomaly = totalToYesterday.add(hyearAnomaly)
                                                .addBands(dayBand);
      
      // Append cumulative anomaly to list
      return ee.List(anomalyList).add(cumulativeAnomaly);
    },
    
    // Set initial dummy list - needs to be two images to allow function code to act on it as a list
    ee.List([ee.Image.constant(0), ee.Image.constant(0).rename("hyearAnomaly")])
    )
  ).slice(2));  // Remove initial dummy list
  
  // Calculate date of minimum for this year per pixel
  var onsetAnomaly = chirpsCumulativeAnomaly
    .reduce(ee.Reducer.min(2))                              // Retain both bands
    .select(1)                                              // Select day band
    .add(1)                                                 // Onset date considered to be day after min value
    .rename("onset");
  
  var cessationAnomaly = chirpsCumulativeAnomaly
    .reduce(ee.Reducer.max(2))
    .select(1)
    .rename("cessation");
  
  var imgName = ee.String("Y").cat(ee.String(y).slice(0,4));
  return onsetAnomaly
    .addBands(cessationAnomaly)                                       // Convert back to day of year
    .set("system:index", imgName);
  
}));

print("Annual season dates - single", annualDatesSingle);

var annualDatesSingleBands = annualDatesSingle.toBands();

// Export to Drive
Export.image.toDrive({
  image: annualDatesSingleBands.toInt(),
  description: "annualDatesSingleExport",
  folder: "season_variables",
  fileNamePrefix: "annualSeasonDatesSingleHYear",
  region: africaBbox,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  maxPixels: 1e9
});

print("Annual single season onset/cessation dates", annualDatesSingle);

//////////////////////////////////////////////////////////////////////////
////// 11. Onset and cessation dates per year - double season pixels //////
//////////////////////////////////////////////////////////////////////////

// 1. As for the single season, then map over years to find annual maxima/minima.
//    Filter to all values within 30 days before/after the hydrological year. Then create
//    a series of hydrological "seasons" (rather than years), in which the search
//    window runs from 45 days before onset to 45 days after cessation.
// 2. For each of these windows, create a new mask that sets all other precipitation
//    values to zero.
// 3. Do the iteration to create seasonal cumulative maxima and minima, but do two for
//    each year (focusing on first and second season).
// 4. Extract onset and cessation dates as normal for each of the two seasons.

// Map over years to retreive season onset and cessation dates

var annualDatesDouble = ee.ImageCollection(yearList.map(function(y) {

  // Retrieve CHIRPS images from 60 days before start of calendar year to 1 year after end
  y = ee.Number(y);
  var yearStart = ee.Date.fromYMD(y, 1, 1);
  var d1 = yearStart.advance(-60, "days");
  var d2 = yearStart.advance(2, "year");
  
  var chirpsYear = chirps
    .filterDate(d1, d2);
  
  // Assign day in hYear number to each image in filtered CHIRPS data and add as band
  var chirpsYearNumbered = chirpsYear
    .map(function(img) {
      var day = ee.Date(img.get("system:time_start")).difference(yearStart, "days");
      var dayBand = ee.Image.constant(day)
        .toInt()
        .rename("day");
      
      return ee.Image(img)
        .set("day", day)
        .addBands(dayBand);
  });
  
  // Mean seasonal onset and cessation dates for single seasons relative to hYear start  
  var seasonDatesDoubleHYear = seasonDatesDouble
    .add(365)
    .subtract(hYearStart)
    .mod(365);

  var onset1 = seasonDatesDoubleHYear.select("onset1");
  var onset2 = seasonDatesDoubleHYear.select("onset2");
  var cessation1 = seasonDatesDoubleHYear.select("cessation1");
  var cessation2 = seasonDatesDoubleHYear.select("cessation2");
  
  // Create seasonal masks for both seasons (from n days before/after season onset/cessation)
  // I can adjust the window to maximise detection and reduce confusion between seasons
  // Search window for maxima/minima
  var window = 45;
  
  // Define masks for seasons
  var chirpsYearMasked = chirpsYearNumbered.map(function(img) {
    
    var precipitation = img.select("precipitation");
    var day = img.select("day");
    
    var hYearDay = day
      .subtract(hYearStart)
      .rename("hYearDay");
  
    // Define season masks for each season
    var season1MaskStart = hYearDay
      .add(window)
      .gte(onset1);
    var season1MaskEnd = hYearDay
      .subtract(window)
      .lte(cessation1);
    var season1Mask = season1MaskStart
      .and(season1MaskEnd)
      .rename("season1Mask");
    
    var season2MaskStart = hYearDay
      .add(window)
      .gte(onset2);
    var season2MaskEnd = hYearDay
      .subtract(window)
      .lte(cessation2);
    var season2Mask = season2MaskStart
      .and(season2MaskEnd)
      .rename("season2Mask");
    
    // Set rainfall outside hyear to zero (not masked, as masking would prevent cumulative sum)
    var chirpsRainfallSeason1 = precipitation
      .multiply(season1Mask)
      .rename("season1Precipitation");
    var chirpsRainfallSeason2 = precipitation
      .multiply(season2Mask)
      .rename("season2Precipitation");
    
    // Add layers as additional bands
    return ee.Image([
      chirpsRainfallSeason1, chirpsRainfallSeason2,
      season1Mask, season2Mask,
      hYearDay
    ]);
  });
  
  // Mean daily rainfall per pixel for each season
  
  var seasonLengths = ee.Image([cessation1.subtract(onset1), cessation2.subtract(onset2)])
    .rename("seasonLength1", "seasonLength2")
    .add(window * 2);

  var meanDailyRainfall = chirpsYearMasked
    .select(["season1Precipitation", "season2Precipitation"])
    .sum()
    .divide(seasonLengths);
  
  // Calculate cumulative anomaly for onset and cessation dates
  var chirpsCumulativeAnomaly = ee.ImageCollection(
  ee.List(
    // Calculate running anomaly through yearly cycle
    chirpsYearMasked.iterate(function(today, anomalyList) {
      
      // Add dayOfYear band and property to allow extraction of onset/cessation
      var dayBand = today.select("hYearDay");
      
      // Extract mask bands as layers
      var sMask = today.select(["season1Mask", "season2Mask"]);
      
      // Update cumulative anomaly with daily anomaly
      var todayAnomaly = ee.Image(today)
        .select(["season1Precipitation", "season2Precipitation"])
        .subtract(meanDailyRainfall);
      
      var seasonAnomaly = todayAnomaly
        .multiply(sMask)                // Set to zero if masked
        .rename(["season1Anomaly", "season2Anomaly"]);
      
      var totalToYesterday = ee.Image(ee.List(anomalyList).get(-1))
        .select(["season1Anomaly", "season2Anomaly"]);
      var cumulativeAnomaly = totalToYesterday.add(seasonAnomaly)
        .addBands(dayBand);
      
      // Append cumulative anomaly to list
      return ee.List(anomalyList).add(cumulativeAnomaly);
    },
    
    // Set initial dummy list - needs to be two images to allow function code to act on it as a list (GEE quirk)
    ee.List([ee.Image.constant(0), ee.Image.constant([0,0]).rename(["season1Anomaly", "season2Anomaly"])])
    )
  ).slice(2));
  
  // Calculate date of minimum for this year per pixel
  var onset1Anomaly = chirpsCumulativeAnomaly
    .select(["season1Anomaly", "hYearDay"])
    .reduce(ee.Reducer.min(2))                              // Retain both bands
    .select(1)                                              // Select day band
    .add(1)                                                 // Onset date considered to be day after min value
    .rename("onset1");
  
  var cessation1Anomaly = chirpsCumulativeAnomaly
    .select(["season1Anomaly", "hYearDay"])
    .reduce(ee.Reducer.max(2))
    .select(1)
    .rename("cessation1");

  var onset2Anomaly = chirpsCumulativeAnomaly
    .select(["season2Anomaly", "hYearDay"])
    .reduce(ee.Reducer.min(2)) 
    .select(1)
    .add(1)
    .rename("onset2");
  
  var cessation2Anomaly = chirpsCumulativeAnomaly
    .select(["season2Anomaly", "hYearDay"])
    .reduce(ee.Reducer.max(2))
    .select(1)
    .rename("cessation2");
  
  return onset1Anomaly
    .addBands(cessation1Anomaly)
    .addBands(onset2Anomaly)
    .addBands(cessation2Anomaly)
    .set("system:index", ee.String("Y").cat(ee.String(y).slice(0,4)));
}));

print("Annual season dates - double", annualDatesDouble);

var annualDatesDoubleBands = annualDatesDouble
  .toBands()
  .toInt();

// Export to Drive
Export.image.toDrive({
  image: annualDatesDoubleBands.toInt(),  /////////////////////////////////////////
  description: "annualDatesDoubleExport",
  folder: "season_variables",
  fileNamePrefix: "annualSeasonDatesDoubleHYear",
  region: africaBbox,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  maxPixels: 1e9
});

Export.image.toAsset({
  image: annualDatesDoubleBands.toInt(),  /////////////////////////////////////////
  description: "annualDatesDoubleAsset",
  assetId: "africa_rangeland_precipitation_gpp/annualDatesDouble",
  region: africaBbox,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  maxPixels: 1e9
});