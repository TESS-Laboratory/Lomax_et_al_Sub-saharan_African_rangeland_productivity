/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var chirps = ee.ImageCollection("UCSB-CHG/CHIRPS/DAILY"),
    pmlv2 = ee.ImageCollection("projects/pml_evapotranspiration/PML/OUTPUT/PML_V2_8day_v016"),
    era5 = ee.ImageCollection("ECMWF/ERA5_LAND/DAILY_AGGR"),
    modisBurn = ee.ImageCollection("MODIS/006/MCD64A1"),
    sand = ee.Image("ISDASOIL/Africa/v1/sand_content"),
    clay = ee.Image("ISDASOIL/Africa/v1/clay_content"),
    soilN = ee.Image("ISDASOIL/Africa/v1/nitrogen_total"),
    soilP = ee.Image("ISDASOIL/Africa/v1/phosphorus_extractable");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//////// Script to calculate and export key non-seasonal variables for Africa rangeland GAM analysis //////
//////// This version calculates and exports yearly variables rather than annual ones /////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// Guy Lomax
//// 2024-05-14
//// G.Lomax@exeter.ac.uk
/////////////////////////////////////////////////////////////////////////////////////////
////// 1. Set geographic region and period for seasonal identification (2001-2019) //////
/////////////////////////////////////////////////////////////////////////////////////////
var AFRICA_BBOX = ee.Geometry.BBox(-18, -35, 52, 20);
// Dates for annual extraction of seasonal data
var startYear = 2001;
var endYear = 2019;
var yearList = ee.List.sequence(startYear, endYear);
var startDate = ee.Date.fromYMD(startYear, 1, 1);
var endDate = ee.Date.fromYMD(endYear + 2, 1, 1);
var chirpsProj = chirps.first().projection().getInfo();
// Define helper function to generate band names for variables
var getBandNames = function(variable, list) {
  var names = ee.List(list).map(function(y) {
    y = ee.String(y).replace("\\.0", "");
    return ee.String(variable)
      .cat("_")
      .cat(y);
  });
  return names;
};
////////////////////////////////////////////////////////////////////////////////
////// 2. Create multiband image of hydrological year dates for filtering //////
////////////////////////////////////////////////////////////////////////////////
// Layers of hYear start and end dates
var hYearStart = ee.Image("projects/ee-guylomax01/assets/africa_rangeland_precipitation_gpp/hYearStartMean")
  .rename("hYearStart");
var hYearEnd = hYearStart
  .add(365)
  .rename("hYearEnd");
// Create multiband image of values 1-731 (max number of days in 2 years)
var daysIn2Years = ee.List.sequence(1, 731);
var daysIn2YearsImg = ee.ImageCollection(
  daysIn2Years.map(function(n) {
    return ee.Image.constant(n)
    .toInt()
    .rename("day")
    .set("day", n);
  })
).toBands();
print(daysIn2YearsImg);
// Convert values to day in hydrological year for each pixel
var dayInHYearImg = daysIn2YearsImg
  .subtract(hYearStart);
// Mask values outside hydrological year
var hYearImg = dayInHYearImg
  .updateMask(dayInHYearImg.gte(0))
  .updateMask(dayInHYearImg.lt(365))
  .rename(getBandNames("day", daysIn2Years));
print(hYearImg)
Map.addLayer(hYearStart, {min: 30, max: 330, palette: ["red", "orange", "yellow", "green", "blue", "purple"]}, "Date of hYear start")
Map.addLayer(hYearImg.select([365]), {min: 0, max: 365, palette: ["red", "orange", "yellow", "green", "blue", "purple"]}, "Day in HYear for 31st Dec")
Export.image.toAsset({
  image: hYearImg,
  description: "hYearImgMask",
  assetId: "africa_rangeland_precipitation_gpp/hYearImgMask",
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  region: AFRICA_BBOX,
  maxPixels: 1e9
});
hYearImg = ee.Image("projects/ee-guylomax01/assets/africa_rangeland_precipitation_gpp/hYearImgMask");
/////////////////////////////////////////////////////////
////// 3. Calculate annual GPP from PML_V2 dataset //////
/////////////////////////////////////////////////////////
// Add dateRange to all PML_V2 images (include end date)
// Need to manually extract end times as start times of subsequent image
// as they are not present in the original data
// Extract system times as list
var gppDates = pmlv2
  .aggregate_array("system:time_start")
  .slice(0, pmlv2.size());
// Add entry for end date of last image
var seriesEndDate = ee.Date("2021-01-01");
var gppDatesExtended = gppDates.add(seriesEndDate.millis());
// Map over image collection to add date range
var gppWithDates = pmlv2
  .select("GPP")
  .map(function(img) {
    img = ee.Image(img);
    
    var systemTimeStart = img.get("system:time_start");
    var systemTimeEnd = gppDatesExtended
      .get(gppDates.indexOf(systemTimeStart).add(1));
    
    var duration = ee.Date(systemTimeEnd)
      .difference(ee.Date(systemTimeStart), "days");
    
    return img
    .set("system:time_end", systemTimeEnd,
         "duration", duration);
});
print(gppWithDates);
var daysInPeriod = ee.List.sequence(
  1,
  endDate.difference(startDate, "days"));
print(daysInPeriod);
var gppDaily = ee.ImageCollection(daysInPeriod.map(function(d) {
  d = ee.Number(d);
  
  var day = startDate.advance(d, "days");
  
  var dateFilter = ee.Filter.and(
      ee.Filter.greaterThanOrEquals({
        leftValue: day.millis(),
        rightField: "system:time_start"
      }),
      ee.Filter.lessThan({
        leftValue: day.millis(),
        rightField: "system:time_end"
      }));
      
  var gppDay = gppWithDates
      .filter(dateFilter)
      .first();
      
  return gppDay
    .set("system:time_start", day.millis());
}));
// Calculate GPP for hYear per pixel
// GPP data is a daily rate for periods of 5-8 days, so need to multiply  
var gppAnnual8Day = ee.ImageCollection(yearList.map(function(y) {
  y = ee.Number(y);
  
  var d1 = ee.Date.fromYMD(y, 1, 1);
  var d2 = d1.advance(2, "years");
  
  var gppYears = gppWithDates
    .filterDate(d1, d2);
  
  // Multiply daily GPP of each image by number of days it intersects with the hYear
  var gppHYearIntersection = gppYears.map(function(img) {
    img = ee.Image(img);
    
    var startDoy = ee.Date(img.get("system:time_start"))
      .difference(d1, "days")
      .add(1);
    
    var endDoy = ee.Date(img.get("system:time_end"))
      .difference(d1, "days")
      .add(1);
    
    var startDoyImg = ee.Image(startDoy)
      .rename("startDay")
      .toInt();
    
    var endDoyImg = ee.Image(endDoy)
      .rename("endDay")
      .toInt();
    
    // Calculate days that this image overlaps with the hydrological year for each pixel
    var overlapStart = endDoyImg.subtract(hYearStart);
    var overlapEnd = hYearEnd.subtract(startDoyImg);
    var imgDuration = ee.Image.constant(img.get("duration"))
      .rename("duration")
      .toInt();
    
    // Sum each image by the number of days of overlap it has with the hYear
    // Formula is max(0, min(overlapStart, overlapEnd, imgDuration)
    // i.e.
    // Case 1 - Image does not overlap with hYear - Multiply by zero
    // Case 2 - Image partially overlaps at start or end - Multiply by number of days of overlap
    // Case 3 - Image fully within hYear - Multiply by total duration of image (5, 6 or 8 days)
    
    var intersectionDays = ee.Image([overlapStart, imgDuration, overlapEnd])
      .reduce(ee.Reducer.min());
    
    var intersectionDaysGt0 = ee.Image.constant(0)
      .addBands(intersectionDays)
      .reduce(ee.Reducer.max());
    
    var intersectionGPP = img.multiply(intersectionDaysGt0);
    
    return intersectionGPP
      .copyProperties(img, ["system:time_start", "system:time_end"]);
  });
  
  var gppHYearSum = gppHYearIntersection
    .sum()
    .rename("gpp");
  
  return gppHYearSum
    .set("system:time_start", d1.millis(),
         "year", y);
}));
print("Annual GPP from raw images", gppAnnual8Day);
// Convert to image with bands
var gppAnnualBands = gppAnnual8Day
  .toBands()
  .rename(getBandNames("gpp", yearList));
// Export intermediate image at original resolution (memory errors when also reprojecting)
var pmlProj = pmlv2.first().projection().getInfo();
Export.image.toAsset({
  image: gppAnnualBands,
  description: "gppAnnualAsset",
  assetId: "africa_rangeland_precipitation_gpp/gppAnnual",
  region: AFRICA_BBOX,
  crs: pmlProj.crs,
  crsTransform: pmlProj.transform,
  maxPixels: 1e9
});
gppAnnualBands = ee.Image("projects/ee-guylomax01/assets/africa_rangeland_precipitation_gpp/gppAnnual");
// Reproject to CHIRPS resolution and export as image
var gppAnnualReproject = gppAnnualBands
  .setDefaultProjection(pmlv2.first().projection())
  .reduceResolution({
    reducer: ee.Reducer.mean(),
    maxPixels: 1024
  })
  .toFloat();
print(gppAnnualReproject);
Export.image.toDrive({
  image: gppAnnualReproject,
  description: "gppAnnualExport",
  folder: "annual_variables",
  fileNamePrefix: "gppAnnual",
  region: AFRICA_BBOX,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  maxPixels: 1e9
});
/////////////////////////////////////////////////////////////
////// 3. Calculate precipitation average annual cycle //////
/////////////////////////////////////////////////////////////
// Filter to study period
var chirpsFiltered = chirps.filterDate(startDate, endDate);
// Average annual cycle
var doyList = ee.List.sequence(1, 365);
var chirpsCycle = ee.ImageCollection(doyList.map(function(doy) {
  var chirpsDay = chirps.filter(ee.Filter.calendarRange(doy, doy, "day_of_year"));
  
  return chirpsDay.mean()
                  .set("day_of_year", doy);
}));
print("Average annual precipitation cycle", chirpsCycle);
////////////////////////////////////////////////////////////////////////////////
////// 4. Process daily precipitation images to represent consistent days //////
////// in the hydrological year for all pixels /////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Generate a 365-day Image Collection for each hydrological year in the dataset
var annualPptHYear = yearList.map(function(y) {
  y = ee.Number(y);
  
  var d1 = ee.Date.fromYMD(y, 1, 1);
  var d2 = d1.advance(2, "years");
  
  var pptYears = chirps
    .filterDate(d1, d2)
    .toList(731);
  
  // Mask daily ppt by whether each day falls within hYear using masked hYearImg
  
  var pptHYear = ee.ImageCollection(pptYears.map(function(img) {
    
    img = ee.Image(img);
    
    var dayIndex = pptYears.indexOf(img);
    var dohy = hYearImg.select(dayIndex);
    
    var imgHYearMasked = img.updateMask(dohy.gte(0));
    
    return imgHYearMasked.set("dayindex", dayIndex);
  }));
  // Convert Image Collection to 2D array (dimensions 365 * 1)
  // Masked values (outside hYear) are dropped
  var pptHYearArray = pptHYear
    .toArray()
    .arrayTranspose();
  
  // Convert array image back to banded image
  var dayNames = getBandNames("day", ee.List.sequence(1, 365));
  var arrayBandNames = [["precipitation"], dayNames];
  
  var pptHYearBands = pptHYearArray.arrayFlatten(arrayBandNames);
  // Convert back to Image Collection
    var dayList = ee.List.sequence(0, 364);
  
  var pptHYearCol = ee.ImageCollection(dayList.map(function(d) {
    d = ee.Number(d);
    
    return pptHYearBands
      .select(d)
      .rename("precipitation")
      .set("day", d.add(1));
  }));
  
  return pptHYearCol.set("hYear", y);
});
print("Annual hYear cycle", annualPptHYear);
print("HYear cycle - 2001", annualPptHYear.get(0));
///////////////////////////////////////////////////////
////// 5. Calculate annual precipitation metrics //////
///////////////////////////////////////////////////////
////// Total precipitation
var pptTotal = ee.ImageCollection(annualPptHYear.map(function(ic) {
  ic = ee.ImageCollection(ic);
  return ic
    .sum()
    .rename("precipitationSum")
    .copyProperties(ic);
}));
// var pptMean = pptTotal
//   .mean()
//   .rename("precipitationMean");
// var pptAnomaly = pptTotal.map(function(img) {
//   img = ee.Image(img);
  
//   return img
//     .divide(pptMean)
//     .rename("precipitationAnomaly")
//     .copyProperties(img);
// });
////// Precipitation timing
var pptMeanDay = ee.ImageCollection(annualPptHYear.map(function(ic) {
  ic = ee.ImageCollection(ic);
  
  var pptTotal = ic.sum();
  
  var icDayProd = ic.map(function(img) {
    img = ee.Image(img);
    
    var day = ee.Number(img.get("day"));
    
    return img.multiply(day);
  });
  
  var icMeanDay = icDayProd
    .sum()
    .divide(pptTotal)
    .rename("pptMeanDay");
  
  return icMeanDay
    .copyProperties(ic);
}));
// var pptMeanDayAnomaly = pptMeanDay.map(function(img) {
//   img = ee.Image(img);
  
//   return img
//     .subtract(pptMeanDay.mean())
//     .rename("pptMeanDayAnomaly")
//     .copyProperties(img);
// });
// Precipitation intensity
var pptIntensity = ee.ImageCollection(annualPptHYear.map(function(ic) {
  ic = ee.ImageCollection(ic);
  
  var wetDays = ic.map(function(img) {
    img = ee.Image(img);
    return img.gt(0);
  }).sum();
  
  var pptSum = ic.sum();
  
  return pptSum
    .divide(wetDays)
    .rename("pptIntensity")
    .copyProperties(ic);
}));
////// Fraction of dry days
var pptDryDays = ee.ImageCollection(annualPptHYear.map(function(ic) {
  ic = ee.ImageCollection(ic);
  
  var dryDays = ic
    .map(function(img) {return img.lt(1)})
    .sum();
    
  return dryDays
    .divide(ic.size())
    .rename("fDryDays")
    .toFloat()
    .copyProperties(ic);
}));
////// Fraction of rainfall falling on days with > 95th percentile of wet days that year (S95pTOT, Leander et al. 2014)
  
var pptGt95Pc = ee.ImageCollection(annualPptHYear.map(function(ic) {
  ic = ee.ImageCollection(ic);
  
  var pptSumYear = ic.sum();
  
  var wetDaysYear = ic.map(function(img) {
    var wetMask = img.gte(1);
    return img.updateMask(wetMask);
  });
  
  var wetDays95PcYear = wetDaysYear
    .reduce(ee.Reducer.percentile([95]));
  
  var pptGt95PcYear = ic.map(function(img) {
    img = ee.Image(img);
    
    var isGreater = img.gt(wetDays95PcYear);
    return img.multiply(isGreater);
  }).sum()
    .toFloat();
  
  return pptGt95PcYear
    .divide(pptSumYear)
    .rename("pptS95PTot")
    .copyProperties(ic);
  
}));
////// Unranked Gini Index
var calculateUgi = function(ic) {
  ic = ee.ImageCollection(ic);
  
  // Days in year
  var days = ic.size();
  
  // Total annual precipitation
  var pptTotalYear = ic.sum();
  
  // Function to calculate a day-by-day cumulative rainfall difference
  // to iterate through ImageCollection
  
  var cumulativeDifference = function(img, img2) {
    // Cumulative precipitation to today
    var pptToday = ee.Image(img);
    var pptToYesterday = ee.Image(img2).select("precipitation");
    var pptToToday = pptToday.add(pptToYesterday);
    
    // Expected cumulative precipitation to today if evenly divided (= total rainfall / 365)
    var expectedPptToday = ee.Image(pptTotalYear.divide(days))
      .rename("expected");
    var expectedPptToYesterday = ee.Image(img2).select("expected");
    var expectedPptToToday = expectedPptToday.add(expectedPptToYesterday);
    
    // Absolute difference in cumulative rainfall aggregated to today
    var diff = pptToToday.subtract(expectedPptToToday)
      .abs()
      .rename("difference");
    var cumulativeDiffToYesterday = ee.Image(img2).select("difference");
    var cumulativeDiffToToday = cumulativeDiffToYesterday.add(diff);
    
    return pptToToday
      .addBands(expectedPptToToday)
      .addBands(cumulativeDiffToToday);
};
  
  // Apply function to ImageCollection to calculate absolute area under difference curve
  var cumulativePptDifference = ee.Image(ic.iterate(
    cumulativeDifference,
    ee.Image.constant([0, 0, 0]).rename(["precipitation", "expected", "difference"])
  ));
  // Calculate unranked GINI index (area under curve * 2)
  return cumulativePptDifference.select("difference")
    .multiply(2)
    .divide(pptTotalYear)
    .divide(days)
    .rename("pptUgi")
    .copyProperties(ic);
};
var pptUgi = ee.ImageCollection(annualPptHYear.map(calculateUgi));
////// Precipitation events greater than a fixed threshold
var calcDaysGtThreshold = function(threshold) {
  
  threshold = ee.Number(threshold);
  var varName = ee.String("daysGt").cat(ee.String(threshold).slice(0,2));
  
  var daysGtThreshold = ee.ImageCollection(annualPptHYear.map(function(ic) {
    ic = ee.ImageCollection(ic);
    
    var gtThresholdYear = ic.map(function(img) {
      img = ee.Image(img);
      
      return img.gte(threshold);
    }).sum()
      .toFloat();
    
    return gtThresholdYear
      .rename(varName)
      .copyProperties(ic);
  }));
  
  return daysGtThreshold;
};
var pptGt10 = calcDaysGtThreshold(10);
var pptGt30 = calcDaysGtThreshold(30);
// Print outputs
print("Total PPT", pptTotal, "PPT mean day", pptMeanDay, "PPT intensity", pptIntensity,
  "PPT > 95th percentile", pptGt95Pc, "PPT > 30 mm", pptGt30, "PPT UGi", pptUgi);
///////////////////////////////////////////////////////////
////// 6. Calculate non-precipitation annual metrics //////
///////////////////////////////////////////////////////////
// Mean air temperature
var tMeanHYears = ee.ImageCollection(yearList.map(function(y) {
  y = ee.Number(y);
  
  var d1 = ee.Date.fromYMD(y, 1, 1);
  var d2 = d1.advance(2, "years");
  
  var tMeanYears = era5
    .select("temperature_2m")
    .filterDate(d1, d2);
  
  // Mask to hydrological year
  var hYearImgClip = hYearImg.select(ee.List.sequence(0, tMeanYears.size().subtract(1)));
  
  var temperatureHYear = tMeanYears
    .toBands()
    .updateMask(hYearImgClip.gt(0));
  
  // Mean value for days during hYear
  var tMeanHYear = temperatureHYear.reduce(ee.Reducer.mean());
  
  var tMeanDeg = tMeanHYear.subtract(273.15);
  return tMeanDeg
    .set("year", y)
    .rename("tMean");
}));
// MODIS burn frequency (binary variable)
// First save burn date for each year as an annual layer
var yearListExtended = yearList.add(2020);
var modisBurnYears = ee.ImageCollection(yearListExtended.map(function(y) {
  y = ee.Number(y);
  
  var d1 = ee.Date.fromYMD(y, 1, 1);
  var d2 = d1.advance(1, "years");
  
  var modisBurnInYear = modisBurn
    .select("BurnDate")
    .filterDate(d1, d2)
    .sum();
  
  return modisBurnInYear
    .set("system:time_start", d1.millis(),
         "system:time_end", d2.millis(),
         "year", y);
}));
print(modisBurnYears);
// Create binary layer reflecting whether a fire occurred in the hydrological
// year starting in year y
var modisBurnHYears = ee.ImageCollection(yearList.map(function(y) {
  var y1 = ee.Number(y);
  var y2 = y1.add(1);
  
  var modisBurnY1 = modisBurnYears
    .filter(ee.Filter.eq("year", y1))
    .first();
  var modisBurnY2 = modisBurnYears
    .filter(ee.Filter.eq("year", y2))
    .first();
  
  // Test if fire occurs in Y1 after start of hYear or in Y2 before start of next hYear
  
  var hYearBurnY1 = modisBurnY1
    .subtract(hYearStart)
    .gte(0)
    .unmask(0);
  
  var hYearBurnY2 = modisBurnY2
    .subtract(hYearStart)
    .lt(0)
    .unmask(0);
  
  var hYearBurnSum = hYearBurnY1.add(hYearBurnY2);
  
  return hYearBurnSum.set("hYear", y1);
}));
//////////////////////////////////////////////////
////// 7. Export remaining annual variables //////
//////////////////////////////////////////////////
// Convert Image Collections to images with bands - precipitation variables
var pptTotalBands = pptTotal
  .toBands()
  .rename(getBandNames("pptTotal", yearList));
var pptMeanDayBands = pptMeanDay
  .toBands()
  .rename(getBandNames("pptMeanDay", yearList));
var pptIntensityBands = pptIntensity
  .toBands()
  .rename(getBandNames("pptIntensity", yearList));
var pptDryDaysBands = pptDryDays
  .toBands()
  .rename(getBandNames("pptDryDays", yearList));
var pptGt95PcBands = pptGt95Pc
  .toBands()
  .rename(getBandNames("pptGt95Pc", yearList));
var pptGt10Bands = pptGt10
  .toBands()
  .rename(getBandNames("pptGt10", yearList));
var pptGt30Bands = pptGt30
  .toBands()
  .rename(getBandNames("pptGt30", yearList));
var pptUgiBands = pptUgi
  .toBands()
  .rename(getBandNames("pptUgi", yearList));
var pptVarsAnnual = ee.Image(
  [pptTotalBands, pptMeanDayBands, pptIntensityBands, pptDryDaysBands,
   pptGt95PcBands, pptGt10Bands, pptGt30Bands, pptUgiBands])
  .toFloat();
print(pptVarsAnnual);
// Convert Image Collections to images with bands and resample - non-precipitation variables
var tMeanBands = tMeanHYears
  .toBands()
  .rename(getBandNames("tMean", yearList))
  .setDefaultProjection(era5.first().projection())
  .resample("bilinear");
var modisBurnBands = modisBurnHYears
  .toBands()
  .rename(getBandNames("modisBurn", yearList))
  .setDefaultProjection(modisBurn.first().projection())
  .reduceResolution({
    reducer: ee.Reducer.mean(),
    maxPixels: 1024
  });
var nonPptVarsAnnual = ee.Image([tMeanBands, modisBurnBands]);
print("Burn layer", modisBurnBands);
// Export
Export.image.toDrive({
  image: pptVarsAnnual,
  description: "pptVarsAnnual",
  folder: "annual_variables",
  region: AFRICA_BBOX,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  maxPixels: 1e9
});
Export.image.toDrive({
  image: nonPptVarsAnnual,
  description: "nonPptVarsAnnual",
  folder: "annual_variables",
  region: AFRICA_BBOX,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  maxPixels: 1e9
});
////////////////////////////////////////////////////
////// 8. Calculate and export soil variables //////
////////////////////////////////////////////////////
print("ISDA soil properties:", sand, clay, soilN, soilP);
// N and P values must be transformed with exp(x/100)-1 to reach raw values
var soilNTransformed = soilN
  .select("mean_0_20")
  .divide(100)
  .exp()
  .subtract(1);
var soilPTransformed = soilP
  .select("mean_0_20")
  .divide(10)
  .exp()
  .subtract(1);
  
Map.addLayer(soilNTransformed, {min: 0, max: 3, palette: ['#edf8fb','#b3cde3','#8c96c6','#8856a7','#810f7c']}, "soil N");
Map.addLayer(soilPTransformed, {min: 0, max: 20, palette: ['#edf8fb','#b3cde3','#8c96c6','#8856a7','#810f7c']}, "soil P");
// Combine iSDAsoil data layers into a single image for 0-20cm interval
var soilCombined = sand.select("mean_0_20")
  .addBands(clay.select("mean_0_20"))
  .addBands(soilNTransformed.select("mean_0_20"))
  .addBands(soilPTransformed.select("mean_0_20"))
  .rename(["sand", "clay", "n", "p"]);
  
var soilReproject = soilCombined
  .reduceResolution({
    reducer: ee.Reducer.mean(),
    bestEffort: true,
    maxPixels: 16384
})
  .reproject({
    crs: chirpsProj.crs,
    crsTransform: chirpsProj.transform
});
// Export
Export.image.toDrive({
  image: soilReproject,
  description: "soil",
  folder: "main_variables",
  region: AFRICA_BBOX,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  maxPixels: 1e9
});