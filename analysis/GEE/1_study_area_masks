/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var modisLc = ee.ImageCollection("MODIS/006/MCD12Q1"),
    esa = ee.ImageCollection("ESA/WorldCover/v100"),
    ai = ee.Image("projects/sat-io/open-datasets/global_ai_et0"),
    chirps = ee.ImageCollection("UCSB-CHG/CHIRPS/DAILY"),
    gppZeroMask = ee.Image("projects/ee-guylomax01/assets/africa_rangeland_precipitation_gpp/gppZeroMask");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
///////////////////////////////////////////////////////////////////////////////////////
////// Script to create study area mask based on land cover and aridity criteria //////
///////////////////////////////////////////////////////////////////////////////////////
// Guy Lomax
// 2024-05-14
// G.Lomax@exeter.ac.uk
// NB - Masks may run out of memory computing in Earth Engine interactive mode. Exports should complete successfully.
// Intermediate exports to assets may be needed before loading and working with assets to prevent memory issues.
/////////////////////////////////////////////////////////////
////// 1. Set geographic region and period (2001-2019) //////
/////////////////////////////////////////////////////////////
var AFRICA_BBOX = ee.Geometry.BBox(-18, -35, 52, 20);
// Dates for annual extraction of seasonal data
var START_YEAR = 2001;
var END_YEAR = 2019;
var yearList = ee.List.sequence(START_YEAR, END_YEAR);
var startDate = ee.Date.fromYMD(START_YEAR, 1, 1);
var endDate = ee.Date.fromYMD(END_YEAR + 1, 1, 1);
// Record CHIRPS native CRS and scale for file export
var chirpsProj = chirps.first().projection().getInfo();
///////////////////////////////////////////
////// 2. MODIS IGBP land cover mask //////
///////////////////////////////////////////
// Colour palette for visualising IGBP land cover classes
var igbpVis = {
  min: 1,
  max: 17,
  palette: [
    '#05450a','#086a10','#54a708','#78d203','#009900','#c6b044',
    '#dcd159','#dade48','#fbff13','#b6ff05', '#27ff87', '#c24f44',
    '#a5a5a5', '#ff6d4c', '#69fff8', '#f9ffa4', '#1c0dff'
  ]
};
// Extract IGBP classification for study period from MODIS land cover product
var igbpLc = modisLc.select("LC_Type1")
                      .filter(ee.Filter.calendarRange(START_YEAR, END_YEAR, "year"));
                      
print("MODIS IGBP Land Cover", igbpLc);
Map.addLayer(igbpLc, igbpVis, "IGBP land cover", false, 0.5);
// Reclassify each image to 1 (rangeland) or zero (non-rangeland)
var igbpLcMask = igbpLc.map(function(img) {
  return img.gte(7).and(img.lte(10));
});
// Resample to CHIRPS projection and resolution
// Retain pixels classified as consisting of > 75% rangeland classes across dataset
var igbpRangelands = igbpLcMask
  .mean()
  .setDefaultProjection(igbpLcMask.first().projection())
  .reduceResolution({
    reducer: ee.Reducer.mean(),
    maxPixels: 256
  })
  .reproject({
    crs: chirpsProj.crs,
    crsTransform: chirpsProj.transform
  })
  .gte(0.75);
  
// Map.addLayer(igbpAverageMask, {min: 0, max: 1}, "average mask");
// Additionally mask pixels that have > 10% "zero value" classes (barren land, open water, snow/ice)
var igbpBarrenMask = igbpLc.map(function(img) {
  return img.lt(15);
});
var igbpNonBarren = igbpBarrenMask
  .mean()
  .setDefaultProjection(igbpBarrenMask.first().projection())
  .reduceResolution({
    reducer: ee.Reducer.mean(),
    maxPixels: 256
  })
  .reproject({
    crs: chirpsProj.crs,
    crsTransform: chirpsProj.transform
  })
  .gte(0.9);
  
// Combined mask
var igbpAll = igbpRangelands.and(igbpNonBarren);
var studyAreaClass = igbpLc
  .mode()
  .updateMask(igbpAll);
Map.addLayer(studyAreaClass, igbpVis, "IGBP study area");
// Export masked IGBP land cover at CHIRPS resolution (taking modal value)
var igbpLcResample = igbpLc
  .toBands()
  .reduceResolution({
    reducer: ee.Reducer.mode(),
    maxPixels: 256
  })
  .reproject({
    crs: chirpsProj.crs,
    crsTransform: chirpsProj.transform
  })
  .updateMask(igbpAll);
Export.image.toDrive({
  image: igbpLcResample,
  description: "igbpLandCover",
  folder: "studyAreaMasks",
  scale: chirpsProj.scale,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  region: AFRICA_BBOX,
  maxPixels: 1e9
});
///////////////////////////////////////////////////
////// 3. ESA WorldCover 10m additional mask //////
///////////////////////////////////////////////////
// Calculate fraction of cropland, built up land, snow/ice, wetland, mangrove or open water (from ESA 2020 product) in CHIRPS pixels
// Use layer to mask out >25% non-rangeland land cover in R
var esa2020 = esa.first();
var esaLc = esa2020.eq(40).or(esa2020.eq(50)).or(esa2020.eq(70)).or(esa2020.eq(80)).or(esa2020.eq(95));
var esaLcFrac = esaLc
  .reduceResolution({
    reducer: ee.Reducer.mean(),
    bestEffort: true,
    maxPixels: 65536
  }).reproject({
    crs: chirpsProj.crs,
    crsTransform: chirpsProj.transform
  });
Map.addLayer(esaLcFrac, {min: 0, max: 1, palette: ['#ffffb2','#fecc5c','#fd8d3c','#f03b20','#bd0026']}, "ESA other land fraction");
Export.image.toDrive({
  image: esaLcFrac,
  description: "esaLcFrac",
  folder: "studyAreaMasks",
  region: AFRICA_BBOX,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  maxPixels: 1e12
});
// Calculate fraction of trees (from ESA 2020 product) in CHIRPS pixels
// Use layer to mask out >50% tree cover in R
var esaWoodyFrac = esa2020.
  lte(20)
  .reduceResolution({
    reducer: ee.Reducer.mean(),
    bestEffort: true,
    maxPixels: 65536
  })
  .reproject({
    crs: chirpsProj.crs,
    crsTransform: chirpsProj.transform
  });
Map.addLayer(esaWoodyFrac, {min: 0, max: 1, palette: ['#ffffb2','#fecc5c','#fd8d3c','#f03b20','#bd0026']}, "ESA tree fraction");
Export.image.toDrive({
  image: esaWoodyFrac,
  description: "esaWoodyFrac",
  folder: "studyAreaMasks",
  region: AFRICA_BBOX,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  maxPixels: 1e12
});
///////////////////////////////////
////// 4. Aridity index mask //////
///////////////////////////////////
// Extract aridity index (to mask in R)
var aiChirps = ai
  .reduceResolution({
    reducer: ee.Reducer.mean(),
    maxPixels: 256
  })
  .reproject({
    crs: chirpsProj.crs,
    crsTransform: chirpsProj.transform
  });
  
Export.image.toDrive({
  image: aiChirps,
  description: "aridity",
  folder: "studyAreaMasks",
  region: AFRICA_BBOX,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  maxPixels: 1e9
});
Map.addLayer(aiChirps, {min: 0, max: 1}, "Aridity index");
//////////////////////////////
////// 5. Zero GPP mask //////
//////////////////////////////
// Masks out pixels with > 10% of the area with persistently zero productivity in the PML_V2 dataset
// (believed to be artefacts of land cover classification)
var gppZeroMaskResample = gppZeroMask
  .reduceResolution({
    reducer: ee.Reducer.mean(),
    maxPixels: 256
  })
  .reproject({
    crs: chirpsProj.crs,
    crsTransform: chirpsProj.transform
  })
  .lte(0.25);
Export.image.toDrive({
  image: gppZeroMaskResample,
  description: "gppZeroMask",
  folder: "studyAreaMasks",
  scale: chirpsProj.scale,
  crs: chirpsProj.crs,
  crsTransform: chirpsProj.transform,
  region: AFRICA_BBOX,
  maxPixels: 1e9
});
Map.addLayer(gppZeroMask, {min: 0, max: 1}, "zero GPP mask");